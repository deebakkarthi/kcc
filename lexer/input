int selectMinVertex(int *value, int *processed) {
    int min = INT_MAX, vertex;
    for (int i = 0; i < V; i++) { if (!processed[i] && value[i] < min) { min = value[i]; vertex = i; } }
    return vertex;
}

void prims(int graph[V][V]) {
    int parent[V], value[V], processed[V];
    for (int i = 0; i < V; i++) { value[i] = INT_MAX; processed[i] = 0; }
    value[0] = 0; parent[0] = -1;
    for (int i = 0; i < V-1; i++) {
        int U = selectMinVertex(value, processed); processed[U] = 1;
        for (int j = 0; j < V; j++) {
            if (graph[U][j] != 0 && !processed[j] && graph[U][j] < value[j]) { value[j] = graph[U][j]; parent[j] = U; }
        }
    }
    for (int i = 1; i < V; i++) { printf("Edge: %d-%d, Weight: %d\n", parent[i], i, graph[i][parent[i]]); }
}

int main() {
    int graph[V][V] = {{0, 9, 75, 0, 0}, {9, 0, 95, 19, 42}, {75, 95, 0, 51, 66}, {0, 19, 51, 0, 31}, {0, 42, 66, 31, 0}};
    prims(graph);
    return 0;
}